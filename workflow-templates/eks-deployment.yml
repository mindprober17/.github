name: Deploy to EKS Template

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      image_tag:
        required: false
        type: string
        default: latest
      k8s_namespace:
        required: true
        type: string
        default: default
      run_sonar:
        required: false
        type: boolean
        default: false

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      KUBE_CONFIG_DATA:
        required: true
      SONAR_TOKEN:
        required: false
      SONAR_HOST_URL:
        required: false

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.set-sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - id: set-sha
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  sonarqube-analysis:
    if: ${{ inputs.run_sonar }}
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: ${{ inputs.run_sonar && 'sonarqube-analysis' || 'checkout' }}
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - id: push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy to Kubernetes
        uses: kodermax/kubectl-aws-eks@main
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: |
            for file in k8s/*.yaml; do
              echo "Applying $file"
              kubectl apply -f "$file" -n ${{ inputs.k8s_namespace }}
            done

            kubectl get deployment ${{ inputs.app_name }} -n ${{ inputs.k8s_namespace }} >/dev/null 2>&1
            kubectl set image deployment/${{ inputs.app_name }} ${{ inputs.app_name }}=${{ needs.build-push.outputs.image }} -n ${{ inputs.k8s_namespace }}

      - name: Verify deployment
        uses: kodermax/kubectl-aws-eks@main
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout status deployment/${{ inputs.app_name }} -n ${{ inputs.k8s_namespace }}
